(()=>{"use strict";var e={872:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Not=t.System=t.Scene=void 0;var n=s(269);Object.defineProperty(t,"Scene",{enumerable:!0,get:function(){return n.Scene}});var o=s(747);Object.defineProperty(t,"System",{enumerable:!0,get:function(){return o.System}});var r=s(959);Object.defineProperty(t,"Not",{enumerable:!0,get:function(){return r.Not}})},976:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AttemptToGetUnassignedComponent=t.AttemptToRemoveUnassignedComponent=t.AttemptToUpdateUnassignedComponent=t.AttemptToAssignDuplicateComponent=t.EntityError=t.Entity=void 0,t.Entity=class{constructor(e,t){this.scene=e,this.updateQueue=t,this.componentsStore=new Map,this.childrenStore=new Set,this.children=(()=>{const e=this,t=this.childrenStore;return{create:function(){const s=e.scene.entities.create();return t.add(s),s}}})()}add(e,t={}){if(this.componentsStore.has(e))throw new n(this,e);const s=new e;return Object.assign(s,t),this.componentsStore.set(e,s),this.updateQueue.queueForUpdate(this),this}update(e,t){if(!this.componentsStore.has(e))throw new o(this,e);const s=this.componentsStore.get(e);return Object.assign(s,t),this}build(e){return e(this)}remove(e){if(!this.componentsStore.has(e))throw new r(this,e);return this.componentsStore.delete(e),this.updateQueue.queueForUpdate(this),this}has(e){return this.componentsStore.has(e)}get(e){if(!this.componentsStore.has(e))throw new c(this,e);return this.componentsStore.get(e)}};class s extends Error{constructor(e){super(`[EntityError]: ${e}`)}}t.EntityError=s;class n extends s{constructor(e,t){super(`Component "${t.name}" cannot be assigned to entity, because the entity already has a component "${t.name}".`),this.entity=e,this.CC=t}}t.AttemptToAssignDuplicateComponent=n;class o extends s{constructor(e,t){super(`Component "${t.name}" cannot be updated for entity, because the entity has no component "${t.name}".`),this.entity=e,this.CC=t}}t.AttemptToUpdateUnassignedComponent=o;class r extends s{constructor(e,t){super(`Component "${t.name}" cannot be removed from entity, because the entity has no component "${t.name}".`),this.entity=e,this.CC=t}}t.AttemptToRemoveUnassignedComponent=r;class c extends s{constructor(e,t){super(`Component "${t.name}" cannot be obtained from entity, because the entity has no component "${t.name}".`),this.entity=e,this.CC=t}}t.AttemptToGetUnassignedComponent=c},959:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Not=t.Negation=void 0;class s{constructor(e){this.subject=e}}t.Negation=s,t.Not=function(e){return new s(e)}},35:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Query=void 0;const n=s(959);t.Query=class{constructor(e){this.filter=e,this.all=new Set,this.added=new Set,this.removed=new Set,this.unchanged=new Set,this.writer=(()=>{const e=this;function t(t){e.all.delete(t),e.added.delete(t),e.unchanged.delete(t),e.matches(t)&&e.removed.add(t)}return{add:function(t){e.matches(t)&&!e.all.has(t)&&(e.all.add(t),e.added.add(t))},update:function(s){e.matches(s)?e.all.has(s)||(e.all.add(s),e.added.add(s)):t(s)},remove:t,flush:function(){for(const t of e.added)e.unchanged.add(t);e.added.clear(),e.removed.clear()}}})(),this.reader=(()=>{const e=this;return{get count(){return e.all.size},all:e.all,added:e.added,removed:e.removed,unchanged:e.unchanged,has:function(t){return e.all.has(t)}}})()}matches(e){return this.filter.every((t=>t instanceof n.Negation?!e.has(t.subject):e.has(t)))}}},269:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AttemptToUpdateUnknownOrForeignEntity=t.AttemptToDestroyUnknownOrForeignEntity=t.AttemptToUnregisterUnknownSystem=t.AttemptToRegisterDuplicateSystem=t.AttemptToGetResourceThatDoesNotExist=t.AttemptToRemoveResourceThatDoesNotExist=t.AttemptToAddResourceThatAlreadyExists=t.AttemptToAttachSceneToItself=t.AttemptToAttachSceneThatIsAlreadyAttachedElsewhere=t.AttemptToCreateCircularReference=t.AttemptToDetachUnattachedScene=t.AttemptToAttachDuplicateScene=t.SceneError=t.Scene=void 0;const n=s(747),o=s(35),r=s(976);t.Scene=class{constructor(){this.parent=null,this.debug=(()=>{const e=this;return{get scenes(){let t=1;for(const s of e.scenesStore)t+=s.debug.scenes;return t},get resources(){return e.resourcesStore.size},get systems(){return e.systemsStore.size},get entities(){return e.entitiesStore.size}}})(),this.scenesStore=new Set,this.scenes=(()=>{const e=this,t=this.scenesStore;return{attach:function(s){if(s===e)throw new h(s);if(t.has(s))throw new a(e,s);if(null!==s.parent)throw new d(e,s);{let t=e.parent;for(;null!==t;){if(t===s)throw new u(e,s);t=t.parent}s.parent=e}t.add(s)},detach:function(s){if(t.has(s))return s.parent=null,t.delete(s);throw new i(e,s)}}})(),this.resourcesStore=new Map,this.resources=(()=>{const e=this,t=this.resourcesStore;return{add:function(s,n={}){if(t.has(s))throw new m(e,s);const o=new s;return Object.assign(o,n),t.set(s,o),o},remove:function(s){if(!t.has(s))throw new l(e,s);t.delete(s)},get:function(s){if(!t.has(s))throw new p(e,s);return t.get(s)}}})(),this.systemsStore=new Map,this.systems=(()=>{const e=this,t=this.systemsStore;return{register:function(s){if(t.has(s))throw new y(e,s);let r=[],c={};for(const[e,t]of Object.entries(s.queries)){const s=new o.Query(t);r.push(s),c[e]=s.reader}const a=new s(e,c),i=new n.SystemContainer(a,r);t.set(s,i),a.initialize()},unregister:function(s){if(!t.has(s))throw new f(e,s);const{system:n}=t.get(s);t.delete(s),n.destroy()}}})(),this.entitiesThatNeedTobeUpdated=new Set,this.entityUpdateQueue=(()=>{const e=this,t=this.entitiesThatNeedTobeUpdated;return{queueForUpdate:function(s){if(!e.entities.exists(s))throw new w(e,s);t.add(s)}}})(),this.entitiesStore=new Set,this.entities=(()=>{const e=this,t=this.entitiesStore;return{create:function(){const s=new r.Entity(e,e.entityUpdateQueue);return t.add(s),s},exists:function(e){return t.has(e)},destroy:function(s){if(!t.has(s))throw new S(e,s);t.delete(s);for(const n of s.childrenStore)t.has(n)&&e.entities.destroy(n);s.childrenStore.clear();for(const[,{queries:t}]of e.systemsStore)for(const e of t)e.writer.remove(s);e.entitiesThatNeedTobeUpdated.delete(s)}}})(),this.initialize()}initialize(){}destroy(){for(const[,{system:e}]of this.systemsStore)e.destroy()}execute(e){for(const[,{queries:e}]of this.systemsStore)for(const t of e)t.writer.flush();for(const[,{system:t}]of this.systemsStore){for(const e of this.entitiesThatNeedTobeUpdated)for(const[,{queries:t}]of this.systemsStore)for(const s of t)s.writer.update(e);this.entitiesThatNeedTobeUpdated.clear(),t.execute(e)}for(const t of this.scenesStore)t.execute(e)}};class c extends Error{constructor(e){super(`[SceneError]: ${e}`)}}t.SceneError=c;class a extends c{constructor(e,t){super(`Scene "${t.constructor.name}" cannot be added to "${e.constructor.name}", because "${e.constructor.name}" already has scene "${t.constructor.name}".`),this.parentScene=e,this.childScene=t}}t.AttemptToAttachDuplicateScene=a;class i extends c{constructor(e,t){super(`Scene "${t.constructor.name}" cannot be removed from "${e.constructor.name}", because "${e.constructor.name}" has no scene "${t.constructor.name}".`),this.parentScene=e,this.childScene=t}}t.AttemptToDetachUnattachedScene=i;class u extends c{constructor(e,t){super(`Scene "${t.constructor.name}" cannot be added to "${e.constructor.name}", because this would create a circular reference`),this.parentScene=e,this.childScene=t}}t.AttemptToCreateCircularReference=u;class d extends c{constructor(e,t){super(`Scene "${t.constructor.name}" cannot be added to "${e.constructor.name}", because "${e.constructor.name}" already belongs to another scene.`),this.parentScene=e,this.childScene=t}}t.AttemptToAttachSceneThatIsAlreadyAttachedElsewhere=d;class h extends c{constructor(e){super(`Scene "${e.constructor.name}" cannot be added to itself.`),this.scene=e}}t.AttemptToAttachSceneToItself=h;class m extends c{constructor(e,t){super(`Resource "${t.name}" cannot be added to "${e.constructor.name}", because "${e.constructor.name}" already has resource "${t.name}".`),this.scene=e,this.RC=t}}t.AttemptToAddResourceThatAlreadyExists=m;class l extends c{constructor(e,t){super(`Resource "${t.name}" cannot be removed from "${e.constructor.name}", because "${e.constructor.name}" has no resource "${t.name}".`),this.scene=e,this.RC=t}}t.AttemptToRemoveResourceThatDoesNotExist=l;class p extends c{constructor(e,t){super(`Resource "${t.name}" cannot be retrieved from "${e.constructor.name}", because "${e.constructor.name}" has no resource "${t.name}".`),this.scene=e,this.RC=t}}t.AttemptToGetResourceThatDoesNotExist=p;class y extends c{constructor(e,t){super(`System "${t.name}" cannot be registered to "${e.constructor.name}", because "${e.constructor.name}" already has a registered system "${t.name}".`),this.scene=e,this.SC=t}}t.AttemptToRegisterDuplicateSystem=y;class f extends c{constructor(e,t){super(`System "${t.name}" cannot be unregisterend from "${e.constructor.name}", because "${e.constructor.name}" does not have a registered system "${t.name}".`),this.scene=e,this.SC=t}}t.AttemptToUnregisterUnknownSystem=f;class S extends c{constructor(e,t){super(`Entity cannot be destroyed by "${e.constructor.name}", because it was not created by "${e.constructor.name}".`),this.scene=e,this.entity=t}}t.AttemptToDestroyUnknownOrForeignEntity=S;class w extends c{constructor(e,t){super(`Entity cannot be updated by "${e.constructor.name}", because it was not created by "${e.constructor.name}".`),this.scene=e,this.entity=t}}t.AttemptToUpdateUnknownOrForeignEntity=w},747:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SystemContainer=t.System=void 0;class s{constructor(e,t){this.scene=e,this.queries=t}initialize(){}destroy(){}}t.System=s,s.queries={},t.SystemContainer=class{constructor(e,t){this.system=e,this.queries=t}}}},t={};function s(n){var o=t[n];if(void 0!==o)return o.exports;var r=t[n]={exports:{}};return e[n](r,r.exports,s),r.exports}(()=>{const e=s(872);class t{constructor(){this.x=0,this.y=0}}class n{constructor(){this.vx=0,this.vy=0}}class o{}class r extends e.System{constructor(){super(...arguments),this.keysPressed=new Set}initialize(){document.addEventListener("keydown",(e=>{this.keysPressed.add(e.key)})),document.addEventListener("keyup",(e=>{this.keysPressed.delete(e.key)}))}execute(){for(const e of this.queries.movables.all){const t=e.get(n);this.keysPressed.has("ArrowUp")?t.vy=-1:this.keysPressed.has("ArrowDown")?t.vy=1:t.vy=0,this.keysPressed.has("ArrowLeft")?t.vx=-1:this.keysPressed.has("ArrowRight")?t.vx=1:t.vx=0}}}r.queries={movables:[n]};class c extends e.System{execute(e){for(const s of this.queries.movables.all){const o=s.get(t),r=s.get(n);o.x+=e*r.vx,o.y+=e*r.vy}}}c.queries={movables:[n,t]};class a extends e.System{execute(){for(const e of this.queries.renderables.all){const{x:s,y:n}=e.get(t),{node:r}=e.get(o);r.style.transform=`translateX(${s}px) translateY(${n}px)`}}}a.queries={renderables:[t,o]};const i=new e.Scene;i.systems.register(r),i.systems.register(c),i.systems.register(a),i.entities.create().add(t).add(n).add(o,{node:document.getElementById("object")});let u=Date.now();!function e(){const t=Date.now(),s=t-u;u=t,i.execute(s),requestAnimationFrame(e)}()})()})();
//# sourceMappingURL=main.js.map